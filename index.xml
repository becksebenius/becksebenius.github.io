<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beck Sebenius - Home on Beck Sebenius</title>
    <link>https://becksebenius.github.io/</link>
    <description>Recent content in Beck Sebenius - Home on Beck Sebenius</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 22 Aug 2015 06:42:21 -0700</lastBuildDate>
    
	<atom:link href="https://becksebenius.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Behaviour Tree Generator</title>
      <link>https://becksebenius.github.io/blog/building-a-behaviour-tree-generator/</link>
      <pubDate>Mon, 04 Dec 2017 03:36:25 -0700</pubDate>
      
      <guid>https://becksebenius.github.io/blog/building-a-behaviour-tree-generator/</guid>
      <description>Behaviour Trees are a key tool in an AI Designer&amp;rsquo;s toolbox. The idea got traction in the early 2000s as a way to define the behavior of an AI agent, and has since evolved into a standardized set of terms and techniques used across the games industry.
In this post, I am going to outline the process I took to implement a behaviour tree tool in the Unity3D engine. In talking with colleagues from around the industry, I find that these tools are repeatedly built and re-built and hopefully this summary of my process can help you build your own.</description>
    </item>
    
    <item>
      <title>Feature Summary: Iterators in C#</title>
      <link>https://becksebenius.github.io/blog/feature-summary-iterators-in-csharp/</link>
      <pubDate>Tue, 25 Apr 2017 13:34:25 -0700</pubDate>
      
      <guid>https://becksebenius.github.io/blog/feature-summary-iterators-in-csharp/</guid>
      <description>When programming with any language, it&amp;rsquo;s important to know the full suite of tools, their caveats, and their hidden benefits. A tool in C# that often goes overlooked are enumerables, and their spouse the iterators (called enumerators in C#). These tools are incredibly powerful and can make code more concise and flexible, but can also end up causing some serious problems down the line.
First, lets establish some terms:</description>
    </item>
    
  </channel>
</rss>